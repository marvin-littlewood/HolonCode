<Chapter>
<Name> Console.fth
<Section>
<Name> Console Windows
<Unit>
<Name> Console-Head
<Source> \ File:    console.fth
\ Project: TclForth
\ Version: 0.6.0
\ License: Tcl
\ Author:  Wolf Wejgaard
\
<Unit>
<Name> ConsoleWindows
<Comment> mark insert 1.0 mark current 1.0 text {Starten ohne CodeWindow } 1.0
<Source> : ConsoleWindows  { -- }
	"TclForth Version 0.7.0" Title
	".forth" "text" Widget Console
	"-padx 10 -pady 10 -relief sunken -border 1 -highlightcolor white" Console config   
	"-expand 1 -fill both" Console pack
	".code" "text" Widget CodeWindow
	"-height 6 -pady 10 -padx 10 -relief sunken -border 1 -highlightcolor white" CodeWindow config  
\	"-expand 0 -fill both" CodeWindow pack
;
<Section>
<Name> Console Print
<Comment> mark insert 1.0 mark current 1.0 text {Die Printworte könnten auch postfix gemacht werden jedoch das greift tief in Tcl ein.
} 1.0 text {Vorerst lieber mit procs arbeiten, prefix. } 2.0
<Unit>
<Name> PrintToConsole
<Source> \ ===================================================================================
\ Print to Forth console
\ ===================================================================================
<Unit>
<Name> print-fth
<Source> proc print-fth {text} {
	$::Console insert end $text
}
<Unit>
<Name> printnl-fth
<Comment> mark insert 1.0 mark current 1.0 text {: printnl-fth { text -- } 
} 1.0 text { 	"$text\n"	Console append
} 2.0 text { } 3.0
<Source> proc printnl-fth {text} {
	$::Console insert end "$text\n"
}
<Unit>
<Name> printforth
<Comment> mark insert 1.0 mark current 1.0 text {Wenn print-fth nicht existiert, ist bereits Forth Printing gesetzt. } 1.0
<Source> Code printforth { -- }  
	if {[info procs print-fth]==""} {return}
	rename print print-tcl
	rename print-fth print
	rename printnl printnl-tcl
	rename printnl-fth printnl
<Section>
<Name> Menu
<Unit>
<Name> MenuHead
<Comment> mark insert 1.0 mark current 1.0 text {
} 1.0 text { } 2.0
<Source> \ ===================================================================================
\ Menus
\ ===================================================================================
<Unit>
<Name> ImportTcl
<Source> Code ImportTcl {} 
	set file [tk_getOpenFile -filetypes {{"" {".tcl"}}} -initialdir ./]
	if {$file==""} {return}
	source $file
<Unit>
<Name> ImportForth
<Source> Code ImportForth {} 
	set file [tk_getOpenFile -filetypes {{"" {".fth"}}} -initialdir ./]
	if {$file==""} {return}
	LoadForth $file
<Unit>
<Name> FileMenu
<Comment> mark insert 1.0 mark current 1.0 text {code FileMenu { -- } 
} 1.0 text {	set ::menu(file) [menu .menubar.file -tearoff 0]
} 2.0 text {	.menubar add cascade -menu $::menu(file) -label File -underline 0
} 3.0 text {	$::menu(file) add command -label "Import .tcl" -command ImportTcl
} 4.0 text {	$::menu(file) add command -label "Import .fth" -command ImportForth
} 5.0 text { } 6.0
<Source> : FileMenu { -- } 
	".menubar.file" Menu fMenu
	"File" fMenu Menubar addmenu
	"Load .tcl" "ImportTcl" fMenu addcommand
	"Load .fth" "ImportForth" fMenu addcommand
;
<Unit>
<Name> SetupMenu
<Comment> mark insert 1.0 text {0.522 Stack immer zeigen oder doch nicht 
} 1.0 text {\	"Show stack" {set withStack 1; cr; okprompt } sMenu addcommand
} 2.0 text {\	"Hide stack" {set withStack 0; cr; okprompt } sMenu addcommand} 3.0 mark current 3.64 text {
} 3.64 text { } 4.0
<Source> : SetupMenu {}
	".menubar.setup" Menu sMenu
	"Setup" sMenu Menubar addmenu
	"Clear Console" {ClearConsole; okprompt}	sMenu addcommand
	"Show stack" {set withStack 1; cr; okprompt } sMenu addcommand
	"Hide stack" {set withStack 0; cr; okprompt } sMenu addcommand
	"Show Codewindow" {pack $CodeWindow -expand 0 -fill both} sMenu addcommand
	"Hide Codewindow" {pack forget $CodeWindow} sMenu addcommand
	"Open Tcl console" {catch "console show"} sMenu addcommand
<Unit>
<Name> GetWords
<Comment> mark tk::anchor1 1.0 mark insert 1.0 text {
} 1.0 text { } 2.0
<Source> Code GetWords { -- fwords } 
	set fwords [array names ::words]
<Unit>
<Name> ShowWords
<Comment> mark insert 1.0 mark current 1.0 text {
} 1.0 text { } 2.0
<Source> : ShowWords  { | words -- }
	cast words list
	GetWords	words setlist  
 	words sort words join
	cr words print 
;

Tcl bind . <Control-w> {ShowWords; okprompt}
<Unit>
<Name> openURL
<Comment> mark insert 1.0 mark current 1.0 text {
} 1.0 text { } 2.0
<Source> Code openURL { webadr -- } 
     if {$::tcl_platform(os)=="Darwin"} {
          eval exec open $webadr &
     } {
          eval exec [auto_execok start] $webadr &
     }
<Unit>
<Name> HelpMenu
<Source> : HelpMenu {} 
	".menubar.help" Menu hMenu
	"Help" hMenu Menubar addmenu
	"TclForth Words" {ShowWords; okprompt} hMenu addcommand
	"TclForth Guide" {push "https://github.com/wolfwejgaard/tclforth/wiki"; openURL} hMenu addcommand
	"Tcl Commands" {push "http://www.tcl.tk/man/tcl/TclCmd/contents.htm"; openURL} hMenu addcommand
<Unit>
<Name> ConsoleMenu
<Source> : ConsoleMenu {}  
	FileMenu 
	SetupMenu
	HelpMenu
<Section>
<Name> Command History
<Unit>
<Name> HistoryHead
<Comment> mark insert 1.0 mark current 1.0 text {
} 1.0 text { } 2.0
<Source> \ ===================================================================================
\ Command history
\ ===================================================================================
<Unit>
<Name> comhistory
<Comment> mark insert 1.0 mark current 1.0 text {Previous command lines
} 1.0 text { } 2.0
<Source> {} list comhistory
<Unit>
<Name> comindex
<Comment> mark insert 1.0 text {Current command line number
} 1.0 text { } 2.0
<Source> 0 variable comindex
<Unit>
<Name> comstart
<Comment> mark tk::anchor.work.page.panes.t.text 1.0 mark insert 1.0 text {Startposition of command line
} 1.0 text { } 2.0
<Source> 1.0 variable comstart
<Unit>
<Name> SaveComline
<Source> : SaveComline { comline -- } 
	comline "" != 
	if	comline comhistory append  	
		comhistory length comindex set 	
	then
;
<Unit>
<Name> ShowComline
<Source> : ShowComline { comline -- }
	comstart Console end  Console delete
	comline Console append
	1.0 Console yview
;
<Unit>
<Name> PrevComline
<Comment> mark insert 1.0 mark current 1.0 text {earlier command } 1.0
<Source> : PrevComline { -- }  
	comindex 0> if -1 comindex add then 
	comindex comhistory	ShowComline
;
<Unit>
<Name> NextComline
<Comment> mark tk::anchor.work.page.panes.t.text 1.0 mark insert 1.0 mark current 1.0 text {Later command } 1.0
<Source> : NextComline { -- }
	comindex incr
	comindex comhistory  length >= 
	if   comhistory length  comindex set   ""
	else comindex comhistory 
	then	ShowComline
;
<Section>
<Name> Prompt
<Unit>
<Name> PromptCLI
<Comment> mark insert 1.0 mark current 1.0 text {
} 1.0 text { } 2.0
<Source> \ ===================================================================================
\ Command line interpreter
\ ===================================================================================
<Unit>
<Name> withStack
<Comment> mark insert 1.0 text {
} 1.0 text { } 2.0
<Source> 1 variable withStack
<Unit>
<Name> ShowStack
<Source> : ShowStack { -- } 
	1 withStack set
;
<Unit>
<Name> HideStack
<Source> : HideStack { -- }
	0 withStack set
;
<Unit>
<Name> okprompt
<Comment> mark insert 1.0 mark current 1.0 text {Wenn die Zeile nicht leer ist vor dem Prompt und der Stack nicht leer ist, ein CR vor dem Prompt.
} 1.0 text {Wird kompliziert. Lieber Klammern um Stack? Ja.
} 2.0 text { } 3.0
<Source> : okprompt { -- }
	depth 0> withStack and
	if   "($::stack) ok\n" 
	else "ok\n" 
	then Console append update 
	Console insert comstart set
	1.0 Console yview
;
<Section>
<Name> Forth Console
<Unit>
<Name> Consoleheader
<Source> \ ===================================================================================
\ Forth Console
\ ===================================================================================
<Unit>
<Name> ShowCompCode
<Comment> mark tk::anchor.work.page.panes.t.text 1.0 mark insert 1.0 mark current 1.0 text {Code der Unit zeigen 
} 1.0 text {kann nützlich sein } 2.0
<Source> Code ShowCompCode { -- }
	global comp
	$::CodeWindow insert end $comp(code)\n
<Unit>
<Name> LoadLine
<Comment> mark tk::anchor.work.page.panes.t.text 1.0 mark insert 1.0 text { } 1.0
<Source> Code LoadLine { -- } 
	InterpretText
	ShowCompCode
<Unit>
<Name> EvalUnit
<Comment> mark insert 1.0 mark current 1.0 text {if [catch LoadLine err]  {printnl "? $err"; ShowCompCode }
} 1.0 text {Der compilierte code wird bereits beim EvalUnit gezeigt.
} 2.0 text { } 3.0
<Source> Code EvalUnit {}
	global comp unit errorInfo
	set unit [string trim $unit]; 
	push $unit; SaveComline
	set comp(text) $unit; set comp(i) 0; set comp(end) [string length $comp(text)]
	if [catch LoadLine err]  {printnl "? $err"}
#	if [catch LoadLine]  {print $errorInfo}
<Unit>
<Name> EvalText
<Comment> mark insert 1.0 text {Den Eingabetext in der Console erfassen und in Units (lines) zerlegen. Der Text kann Leerzeilen enthalten wie Source files.
} 1.0 text {
} 2.0 text {Text splitten nach \n gibt Liste von Zeilen.
} 3.0 text {Leerzeile gibt leeren Eintrag in der Liste.
} 4.0 text {Einträge ohne Leereintrag joinen. 
} 5.0 text {3 \n hintereinander geben 2 Leereinträge } 6.0 mark current 6.41 text {
} 6.41 text {
} 7.0 text {Eine leere Befehlszeile gar nicht erst drucken, nur okprompt am Anfang zeigen } 8.0
<Source> Code EvalText { -- }  
	global comp unit
	set text [$::Console get "$::comstart -1 chars" "insert lineend"]; 
	set text [string trim $text]; set textend [string length $text]
	if {$text== ""} {okprompt; return}
	set lines [split $text \n]
	set unit ""
	printnl ""
	$::CodeWindow delete 1.0 end
	foreach line $lines {
		if {$line != ""} {
			append unit \n $line 
		} {
			EvalUnit
			set unit ""
		}
	}
	EvalUnit
	okprompt
<Unit>
<Name> ClearConsole
<Source> : ClearConsole { -- }
	!s
	"1.0" Console end Console delete ;

Tcl bind . <Control-c> {ClearConsole; okprompt}
<Unit>
<Name> ClearStack
<Comment> mark insert 1.0 mark current 1.0 text {
} 1.0 text { } 2.0
<Source> : ClearStack { -- }
	!s cr okprompt ;
	
Tcl bind . <Control-s> ClearStack
<Unit>
<Name> HideTclConsole
<Comment> mark insert 1.0 mark current 1.0 text {Die Tcl console wird am Anfang von TclForth mit Tk geladen, um den Ladeprozess aufzuzeichnen. 
} 1.0 text {
} 2.0 text {Schlechte Idee für Linux wenn aus dem Terminal gestartet. Mit catch ok. } 3.0
<Source> Code HideTclConsole { -- }
	catch {console hide}
<Unit>
<Name> ForthConsole
<Comment> mark insert 1.0 mark current 1.0 text {A Forth access to Tcl/Tk      (Ctrl-C = Clear Console, 	Ctrl-S = Clear Stack)  	
} 1.0 text { } 2.0
<Source> : ForthConsole { -- }
	HideTclConsole
	ConsoleWindows
	"<Return> {EvalText; break}" Console bind   
	"<Shift-Return> {cr; break}" Console bind       
	"<Up> {PrevComline; break}"  Console bind
	"<Down> {NextComline; break}" Console bind
	ConsoleMenu
	printforth
	"Ctrl-C = Clear Console" .cr
	"Ctrl-S = Clear Stack" .cr
	"Ctrl-W = Show Words" .cr
	"--" .cr 	
	okprompt
;
